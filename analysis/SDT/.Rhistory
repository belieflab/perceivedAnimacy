"Z"="sup. (S & Z)","B"="rel. val. ctrl. (B & R)","R"="rel. val. ctrl. (B & R)","S"="sup. (S & Z)"))
# visualize both phases
ggplot(db_rat, aes(x=nRat, y=Response, col=excInh)) +
geom_vline(xintercept=8.5) +
geom_hline(yintercept=0) +
stat_summary(geom = "line") +
stat_summary() +
scale_x_continuous(breaks = unique(db_rat$nRat)) +
facet_wrap(. ~ ctrlType) +
theme_classic()
# zero complement
db_rat2 <- db_rat[db_rat$ctrlType == "sup. (S & Z)" | db_rat$ctrlType == "sup. ctrl. (K & C)" | db_rat$ctrlType == "rel. val. ctrl. (B & R)",]
fig1A <- ggplot(db_rat, aes(x=nRat, y=Response, col=excInh, shape=ctrlType, linetype=ctrlType)) +
labs(title="Contingency Judgments of Individual Cues", y="Rating",
x="Number of Blocks", col="Cond. Type",shape="Cue Type",
linetype="Cue Type") +
geom_vline(xintercept=8.5) +
geom_hline(yintercept=0) +
stat_summary(geom = "line", position = position_dodge(0.5)) +
stat_summary(position = position_dodge(0.5)) +
scale_x_continuous(breaks = unique(db_rat$nRat)) +
scale_y_continuous(breaks = seq(-100,100,20)) +
# coord_cartesian(ylim = c(30,80)) +
theme_classic()
fig1A
fig1B <- ggplot(db_rat2, aes(x=nRat, y=rat0comp, col=excInh, shape=ctrlType, linetype=ctrlType)) +
labs(title="Contingency Judgments of Individual Cues", y="Rating",
x="Number of Blocks", col="Cond. Type",shape="Cue Type",
linetype="Cue Type") +
geom_vline(xintercept=8.5) +
geom_hline(yintercept=0) +
stat_summary(geom = "line", position = position_dodge(0.5)) +
stat_summary(position = position_dodge(0.5)) +
scale_x_continuous(breaks = unique(db_rat$nRat)) +
scale_y_continuous(breaks = seq(-100,100,20)) +
# coord_cartesian(ylim = c(30,80)) +
theme_classic()
fig1B
write.csv <- 0
if (write.csv == 1) {
db_rat$trials <- db_rat$Zone.Type <- db_rat$Correct <- NULL
write.csv(db_rat,paste0(getwd(),"/db_rat_v1.csv"),na="",row.names=F)
}
# # # # # # # # # # Behaviour # # # # # # # # # # # # # #
# # # # # # # # # # Behaviour # # # # # # # # # # # # # # # # # # # # # # # ####
# filter by rows (only when the keyboard was pressed)
ph1_beh <- ph1[ph1$Zone.Type == "response_keyboard",]
ph2_beh <- ph2[ph2$Zone.Type == "response_keyboard",]
subj <- unique(ph1_beh$Participant.Private.ID)
nSubj <- length(subj)
nSubj
dim(ph1_beh[ph1_beh$Participant.Private.ID=="5881945",])
dim(ph2_beh[ph2_beh$Participant.Private.ID=="5881945",])
ph1_beh$Trial.Number <- rep(1:32,nSubj)
ph2_beh$Trial.Number
table(ph2_beh$Trial.Number)
# Remove all of the elements currently loaded in R
rm(list=ls(all=TRUE))
# set work directory in the same place as my script is saved
setwd(file.path(dirname(rstudioapi::getActiveDocumentContext()$path)))
# # # # # # # # # #  Import libraries and data# # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
if (!require(plyr)) {install.packages("plyr")}; library(plyr) # revalue()
if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2) # ggplot()
if (!require(ggpubr)) {install.packages("ggpubr")}; library(ggpubr) # ggarrange()
if (!require(dplyr)) {install.packages("dplyr")}; library(dplyr) # %>%
# data folder name
datFolName <- "data_exp_88195-v10"
# load .csv files names fro our work directory (i.e., where this R script is saved)
file_names <- list.files(path = paste0(getwd(),"/",datFolName), pattern = ".csv")
# combine both phase 1 arms (counterbalanced stimuli) into one
ph1 <- rbind(read.csv(paste0(getwd(),"/",datFolName,"/",file_names[grepl("racf",file_names)])),
read.csv(paste0(getwd(),"/",datFolName,"/",file_names[grepl("9pcx",file_names)])))
# combine both phase 2 arms (counterbalanced stimuli) into one
# first phase 2 blocks
ph2.1 <- rbind(read.csv(paste0(getwd(),"/",datFolName,"/",file_names[grepl("okxx",file_names)])),
read.csv(paste0(getwd(),"/",datFolName,"/",file_names[grepl("vgx1",file_names)])))
# second phase 2 blocks
ph2.2 <- rbind(read.csv(paste0(getwd(),"/",datFolName,"/",file_names[grepl("4mm1",file_names)])),
read.csv(paste0(getwd(),"/",datFolName,"/",file_names[grepl("z11d",file_names)])))
# combine first and second phase 2 blocks
ph2 <- rbind(ph2.1,ph2.2)
# vector with relevant columns' names
relCols <- c("Participant.Private.ID","Participant.Public.ID","Trial.Number","Zone.Type","Response","Correct","phase","trials","nRating","condition")
# filter data.frame phases by relevant columns
ph1 <- ph1[,relCols]
ph2 <- ph2[,relCols]
# get SPQ and BDI2
spq <- read.csv(paste0(getwd(),"/",datFolName,"/",file_names[grepl("1p7h",file_names)]))
bdi <- read.csv(paste0(getwd(),"/",datFolName,"/",file_names[grepl("1z9u",file_names)]))
# relevant columns
relCols <- c("Participant.Private.ID","Participant.Public.ID","Question.Key","Response")
# filter rows by any row in Question.Key saying "quantised"
spq <- spq[grepl("quantised",spq$Question.Key),relCols]
spq$Response <- as.integer(as.character(spq$Response))
# remove irrelevant created elements from the environement (some of my OCD traits)
remove(file_names,relCols,ph2.1,ph2.2,ph2.3)
# change trial number variable type
ph1$Trial.Number <- as.integer(as.character(ph1$Trial.Number))
ph2$Trial.Number <- as.integer(as.character(ph2$Trial.Number))
# # # # # # # # # # Ratings # # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# filter by rows (only the end value of a rating)
ph1_rat <- ph1[ph1$Zone.Type == "response_slider_endValue",]
ph2_rat <- ph2[ph2$Zone.Type == "response_slider_endValue",]
# change the variable to numeric
ph1_rat$Response <- as.integer(as.character(ph1_rat$Response))
ph2_rat$Response <- as.integer(as.character(ph2_rat$Response))
# # # # # visualize phase 1 ratings # # # # #
# # # # # # # # # # # # # # # # # # # # # # #
# add correct rating number phase 1
ph1_rat$nRat <- as.integer(substr(ph1_rat$nRating,5,nchar(ph1_rat$nRating)))
# transform ratings from [0,100] to [-100,100]
ph1_rat$Response <- (ph1_rat$Response*2)-100
# plot phase 1 ratings
ggplot(ph1_rat, aes(x=nRat, y=Response, col=condition)) +
geom_hline(yintercept=0) +
stat_summary(geom = "line") +
stat_summary() +
theme_classic()
# # # # # visualize phase 2 ratings # # # # #
# # # # # # # # # # # # # # # # # # # # # # #
# add correct rating number phase 2
ph2_rat$nRat <- as.integer(substr(ph2_rat$nRating,5,nchar(ph2_rat$nRating)))
ph2_rat$nRat <- ph2_rat$nRat + 16 # add 16 trials from phase 1
# transform ratings from [0,100] to [-100,100]
ph2_rat$Response <- (ph2_rat$Response*2)-100
# plot phase 2 ratings
ggplot(ph2_rat, aes(x=nRat, y=Response, col=condition)) +
geom_hline(yintercept=0) +
stat_summary(geom = "line") +
stat_summary() +
theme_classic()
# # # create 0 complement ratings # # #
# for phase 1
ph1_rat$rat0comp <- as.integer(revalue(ph1_rat$condition,c("E"=1,"I"=-1)))
ph1_rat$rat0comp <- ph1_rat$rat0comp * ph1_rat$Response
# for phase 2
ph2_rat$rat0comp <- as.integer(revalue(ph2_rat$condition,c("E"=1,"I"=-1,"K"=-1,"C"=1,
"Z"=-1,"B"=1,"R"=-1,"S"=1)))
ph2_rat$rat0comp <- ph2_rat$rat0comp * ph2_rat$Response
# combine phases
db_rat <- data.frame(phase = c(rep("ph1",each=nrow(ph1_rat)),
rep("ph2",each=nrow(ph2_rat))),
rbind(ph1_rat,ph2_rat))
# add spq
db_rat$spq <- NA
for (i in 1:length(unique(spq$Participant.Private.ID))) {
db_rat$spq[db_rat$Participant.Private.ID == unique(spq$Participant.Private.ID)[i]] <-
sum(spq$Response[spq$Participant.Private.ID == unique(spq$Participant.Private.ID)[i]])
}
# create factor for excitation and inhibitory
db_rat$excInh <- revalue(db_rat$condition,c("E"="Inh","I"="Exc","K"="Inh","C"="Exc",
"Z"="Inh","B"="Exc","R"="Inh","S"="Exc"))
# create factor for stimuli set type
db_rat$ctrlType <- revalue(db_rat$condition,c("E"="pre. (E & I)","I"="pre. (E & I)","K"="sup. ctrl. (K & C)","C"="sup. ctrl. (K & C)",
"Z"="sup. (S & Z)","B"="rel. val. ctrl. (B & R)","R"="rel. val. ctrl. (B & R)","S"="sup. (S & Z)"))
# visualize both phases
ggplot(db_rat, aes(x=nRat, y=Response, col=excInh)) +
geom_vline(xintercept=16.5) +
geom_hline(yintercept=0) +
stat_summary(geom = "line") +
stat_summary() +
scale_x_continuous(breaks = unique(db_rat$nRat)) +
facet_wrap(. ~ ctrlType) +
theme_classic()
# zero complement
db_rat2 <- db_rat[db_rat$ctrlType == "sup. (S & Z)" | db_rat$ctrlType == "sup. ctrl. (K & C)" | db_rat$ctrlType == "rel. val. ctrl. (B & R)",]
fig1A <- ggplot(db_rat, aes(x=nRat, y=Response, col=excInh, shape=ctrlType, linetype=ctrlType)) +
labs(title="Contingency Judgments of Individual Cues", y="Rating",
x="Number of Blocks", col="Cond. Type",shape="Cue Type",
linetype="Cue Type") +
geom_vline(xintercept=16.5) +
geom_hline(yintercept=0) +
stat_summary(geom = "line", position = position_dodge(0.5)) +
stat_summary(position = position_dodge(0.5)) +
scale_x_continuous(breaks = unique(db_rat$nRat)) +
scale_y_continuous(breaks = seq(-100,100,20)) +
# coord_cartesian(ylim = c(30,80)) +
theme_classic()
fig1A
fig1B <- ggplot(db_rat2, aes(x=nRat, y=rat0comp, col=excInh, shape=ctrlType, linetype=ctrlType)) +
labs(title="Contingency Judgments of Individual Cues", y="Rating",
x="Number of Blocks", col="Cond. Type",shape="Cue Type",
linetype="Cue Type") +
geom_vline(xintercept=16.5) +
geom_hline(yintercept=0) +
stat_summary(geom = "line", position = position_dodge(0.5)) +
stat_summary(position = position_dodge(0.5)) +
scale_x_continuous(breaks = unique(db_rat$nRat)) +
scale_y_continuous(breaks = seq(-100,100,20)) +
# coord_cartesian(ylim = c(30,80)) +
theme_classic()
fig1B
write.csv <- 0
if (write.csv == 1) {
db_rat$trials <- db_rat$Zone.Type <- db_rat$Correct <- NULL
write.csv(db_rat,paste0(getwd(),"/db_rat_v1.csv"),na="",row.names=F)
}
# # # # # # # # # # Behaviour # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # #
# # # # # # # # # # Behaviour # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# filter by rows (only when the keyboard was pressed)
ph1_beh <- ph1[ph1$Zone.Type == "response_keyboard",]
ph2_beh <- ph2[ph2$Zone.Type == "response_keyboard",]
subj <- unique(ph1_beh$Participant.Private.ID)
nSubj <- length(subj)
subj
dim(ph1_beh[ph1_beh$Participant.Private.ID=="6526300",])
dim(ph2_beh[ph2_beh$Participant.Private.ID=="6526300",])
# # # # # # # # # # Behaviour # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# filter by rows (only when the keyboard was pressed)
ph1_beh <- ph1[ph1$Zone.Type == "response_keyboard",]
ph2_beh <- ph2[ph2$Zone.Type == "response_keyboard",]
subj <- unique(ph1_beh$Participant.Private.ID)
nSubj <- length(subj)
dim(ph1_beh[ph1_beh$Participant.Private.ID=="6526300",])
dim(ph2_beh[ph2_beh$Participant.Private.ID=="6526300",])
ph1_beh$Trial.Number <- rep(1:64,nSubj)
ph2_beh$Trial.Number <- rep(1:192,nSubj)
# combine phases
db_beh <- rbind(ph1_beh,ph2_beh)
# change the variable to numeric
db_beh$Response <- ifelse(db_beh$Response=="u",1,0)
# add condition type (excitatory or inhibitory)
db_beh$excInh <- revalue(db_beh$condition,c("Ie1"="Exc","e1"="Exc","SI"="Exc","I"="Exc",
"Ce2"="Exc","e2"="Exc","Be3"="Exc","e3"="Exc",
"Ee4"="Inh","e4"="Inh","ZE"="Inh","E"="Inh",
"Ke5"="Inh","e5"="Inh","Re6"="Inh","e6"="Inh"))
# change character to factor
db_beh$condition <- factor(db_beh$condition, levels=c("Ie1","e1","SI","I",
"Ce2","e2","Be3","e3",
"Ee4","e4","ZE","E",
"Ke5","e5","Re6","e6"))
levels(db_beh$condition) <- paste0(levels(db_beh$condition),
c("-","+","+","-","+","-","+","+",
"+","-","-","+","-","+","-","-"))
# # # # # visualize phase 1 correctness # # # # #
fig1C <- ggplot(db_beh[db_beh$phase == 1,], aes(x=condition, y=Correct, col=excInh)) +
labs(title="Phase 1", y="% Correct",
x="Trial Types",col="Cond. Type") +
geom_hline(yintercept=0.5) +
stat_summary() +
scale_y_continuous(breaks = seq(0,1,0.1)) +
coord_cartesian(ylim = c(0.3,0.8)) +
theme_classic()
fig1C
# # # # # visualize phase 2 correctness # # # # #
fig1D <- ggplot(db_beh[db_beh$phase == 2,], aes(x=condition, y=Correct, col=excInh)) +
labs(title="Phase 2", y="% Correct",
x="Trial Types",col="Cond. Type") +
geom_hline(yintercept=0.5) +
stat_summary() +
scale_y_continuous(breaks = seq(0,1,0.1)) +
coord_cartesian(ylim = c(0.3,0.8)) +
theme_classic()
fig1D
fig2A <- ggplot(db_beh, aes(x=condition, y=Correct , col=as.factor(phase))) +
labs(title="% Correct and Trial Types", y="% Correct",
x="Trial Types",col="Phases") +
geom_hline(yintercept=0.5) +
stat_summary() +
theme_classic()
fig2A
colnames(db_beh)
db_beh_acc <- db_beh %>% group_by(Participant.Private.ID,condition) %>%
summarise(accuracy = mean(Correct))
db_beh_acc
# Remove all of the elements currently loaded in R
rm(list=ls(all=TRUE))
# set work directory in the same place as my script is saved
setwd(file.path(dirname(rstudioapi::getActiveDocumentContext()$path)))
# # # # # # # # # #  Import libraries and data# # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
if (!require(plyr)) {install.packages("plyr")}; library(plyr) # revalue()
if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2) # ggplot()
if (!require(ggpubr)) {install.packages("ggpubr")}; library(ggpubr) # ggarrange()
if (!require(dplyr)) {install.packages("dplyr")}; library(dplyr) # %>%
# data folder name
datFolName <- "data_exp_88195-v10"
# load .csv files names fro our work directory (i.e., where this R script is saved)
file_names <- list.files(path = paste0(getwd(),"/",datFolName), pattern = ".csv")
# combine both phase 1 arms (counterbalanced stimuli) into one
ph1 <- rbind(read.csv(paste0(getwd(),"/",datFolName,"/",file_names[grepl("racf",file_names)])),
read.csv(paste0(getwd(),"/",datFolName,"/",file_names[grepl("9pcx",file_names)])))
# combine both phase 2 arms (counterbalanced stimuli) into one
# first phase 2 blocks
ph2.1 <- rbind(read.csv(paste0(getwd(),"/",datFolName,"/",file_names[grepl("okxx",file_names)])),
read.csv(paste0(getwd(),"/",datFolName,"/",file_names[grepl("vgx1",file_names)])))
# second phase 2 blocks
ph2.2 <- rbind(read.csv(paste0(getwd(),"/",datFolName,"/",file_names[grepl("4mm1",file_names)])),
read.csv(paste0(getwd(),"/",datFolName,"/",file_names[grepl("z11d",file_names)])))
# combine first and second phase 2 blocks
ph2 <- rbind(ph2.1,ph2.2)
# vector with relevant columns' names
relCols <- c("Participant.Private.ID","Participant.Public.ID","Trial.Number","Zone.Type","Response","Correct","phase","trials","nRating","condition")
# filter data.frame phases by relevant columns
ph1 <- ph1[,relCols]
ph2 <- ph2[,relCols]
# get SPQ and BDI2
spq <- read.csv(paste0(getwd(),"/",datFolName,"/",file_names[grepl("1p7h",file_names)]))
bdi <- read.csv(paste0(getwd(),"/",datFolName,"/",file_names[grepl("1z9u",file_names)]))
# relevant columns
relCols <- c("Participant.Private.ID","Participant.Public.ID","Question.Key","Response")
# filter rows by any row in Question.Key saying "quantised"
spq <- spq[grepl("quantised",spq$Question.Key),relCols]
spq$Response <- as.integer(as.character(spq$Response))
# remove irrelevant created elements from the environement (some of my OCD traits)
remove(file_names,relCols,ph2.1,ph2.2,ph2.3)
# change trial number variable type
ph1$Trial.Number <- as.integer(as.character(ph1$Trial.Number))
ph2$Trial.Number <- as.integer(as.character(ph2$Trial.Number))
# # # # # # # # # # Ratings # # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# filter by rows (only the end value of a rating)
ph1_rat <- ph1[ph1$Zone.Type == "response_slider_endValue",]
ph2_rat <- ph2[ph2$Zone.Type == "response_slider_endValue",]
# change the variable to numeric
ph1_rat$Response <- as.integer(as.character(ph1_rat$Response))
ph2_rat$Response <- as.integer(as.character(ph2_rat$Response))
# # # # # visualize phase 1 ratings # # # # #
# # # # # # # # # # # # # # # # # # # # # # #
# add correct rating number phase 1
ph1_rat$nRat <- as.integer(substr(ph1_rat$nRating,5,nchar(ph1_rat$nRating)))
# transform ratings from [0,100] to [-100,100]
ph1_rat$Response <- (ph1_rat$Response*2)-100
# plot phase 1 ratings
ggplot(ph1_rat, aes(x=nRat, y=Response, col=condition)) +
geom_hline(yintercept=0) +
stat_summary(geom = "line") +
stat_summary() +
theme_classic()
# # # # # visualize phase 2 ratings # # # # #
# # # # # # # # # # # # # # # # # # # # # # #
# add correct rating number phase 2
ph2_rat$nRat <- as.integer(substr(ph2_rat$nRating,5,nchar(ph2_rat$nRating)))
ph2_rat$nRat <- ph2_rat$nRat + 16 # add 16 trials from phase 1
# transform ratings from [0,100] to [-100,100]
ph2_rat$Response <- (ph2_rat$Response*2)-100
# plot phase 2 ratings
ggplot(ph2_rat, aes(x=nRat, y=Response, col=condition)) +
geom_hline(yintercept=0) +
stat_summary(geom = "line") +
stat_summary() +
theme_classic()
# # # create 0 complement ratings # # #
# for phase 1
ph1_rat$rat0comp <- as.integer(revalue(ph1_rat$condition,c("E"=1,"I"=-1)))
ph1_rat$rat0comp <- ph1_rat$rat0comp * ph1_rat$Response
# for phase 2
ph2_rat$rat0comp <- as.integer(revalue(ph2_rat$condition,c("E"=1,"I"=-1,"K"=-1,"C"=1,
"Z"=-1,"B"=1,"R"=-1,"S"=1)))
ph2_rat$rat0comp <- ph2_rat$rat0comp * ph2_rat$Response
# combine phases
db_rat <- data.frame(phase = c(rep("ph1",each=nrow(ph1_rat)),
rep("ph2",each=nrow(ph2_rat))),
rbind(ph1_rat,ph2_rat))
# add spq
db_rat$spq <- NA
for (i in 1:length(unique(spq$Participant.Private.ID))) {
db_rat$spq[db_rat$Participant.Private.ID == unique(spq$Participant.Private.ID)[i]] <-
sum(spq$Response[spq$Participant.Private.ID == unique(spq$Participant.Private.ID)[i]])
}
# create factor for excitation and inhibitory
db_rat$excInh <- revalue(db_rat$condition,c("E"="Inh","I"="Exc","K"="Inh","C"="Exc",
"Z"="Inh","B"="Exc","R"="Inh","S"="Exc"))
# create factor for stimuli set type
db_rat$ctrlType <- revalue(db_rat$condition,c("E"="pre. (E & I)","I"="pre. (E & I)","K"="sup. ctrl. (K & C)","C"="sup. ctrl. (K & C)",
"Z"="sup. (S & Z)","B"="rel. val. ctrl. (B & R)","R"="rel. val. ctrl. (B & R)","S"="sup. (S & Z)"))
# visualize both phases
ggplot(db_rat, aes(x=nRat, y=Response, col=excInh)) +
geom_vline(xintercept=16.5) +
geom_hline(yintercept=0) +
stat_summary(geom = "line") +
stat_summary() +
scale_x_continuous(breaks = unique(db_rat$nRat)) +
facet_wrap(. ~ ctrlType) +
theme_classic()
# zero complement
db_rat2 <- db_rat[db_rat$ctrlType == "sup. (S & Z)" | db_rat$ctrlType == "sup. ctrl. (K & C)" | db_rat$ctrlType == "rel. val. ctrl. (B & R)",]
fig1A <- ggplot(db_rat, aes(x=nRat, y=Response, col=excInh, shape=ctrlType, linetype=ctrlType)) +
labs(title="Contingency Judgments of Individual Cues", y="Rating",
x="Number of Blocks", col="Cond. Type",shape="Cue Type",
linetype="Cue Type") +
geom_vline(xintercept=16.5) +
geom_hline(yintercept=0) +
stat_summary(geom = "line", position = position_dodge(0.5)) +
stat_summary(position = position_dodge(0.5)) +
scale_x_continuous(breaks = unique(db_rat$nRat)) +
scale_y_continuous(breaks = seq(-100,100,20)) +
# coord_cartesian(ylim = c(30,80)) +
theme_classic()
fig1A
fig1B <- ggplot(db_rat2, aes(x=nRat, y=rat0comp, col=excInh, shape=ctrlType, linetype=ctrlType)) +
labs(title="Contingency Judgments of Individual Cues", y="Rating",
x="Number of Blocks", col="Cond. Type",shape="Cue Type",
linetype="Cue Type") +
geom_vline(xintercept=16.5) +
geom_hline(yintercept=0) +
stat_summary(geom = "line", position = position_dodge(0.5)) +
stat_summary(position = position_dodge(0.5)) +
scale_x_continuous(breaks = unique(db_rat$nRat)) +
scale_y_continuous(breaks = seq(-100,100,20)) +
# coord_cartesian(ylim = c(30,80)) +
theme_classic()
fig1B
write.csv <- 0
if (write.csv == 1) {
db_rat$trials <- db_rat$Zone.Type <- db_rat$Correct <- NULL
write.csv(db_rat,paste0(getwd(),"/db_rat_v1.csv"),na="",row.names=F)
}
# # # # # # # # # # Behaviour # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# filter by rows (only when the keyboard was pressed)
ph1_beh <- ph1[ph1$Zone.Type == "response_keyboard",]
ph2_beh <- ph2[ph2$Zone.Type == "response_keyboard",]
subj <- unique(ph1_beh$Participant.Private.ID)
nSubj <- length(subj)
dim(ph1_beh[ph1_beh$Participant.Private.ID=="6526300",])
dim(ph2_beh[ph2_beh$Participant.Private.ID=="6526300",])
ph1_beh$Trial.Number <- rep(1:64,nSubj)
ph2_beh$Trial.Number <- rep(1:192,nSubj)
# combine phases
db_beh <- rbind(ph1_beh,ph2_beh)
# change the variable to numeric
db_beh$Response <- ifelse(db_beh$Response=="u",1,0)
# add condition type (excitatory or inhibitory)
db_beh$excInh <- revalue(db_beh$condition,c("Ie1"="Exc","e1"="Exc","SI"="Exc","I"="Exc",
"Ce2"="Exc","e2"="Exc","Be3"="Exc","e3"="Exc",
"Ee4"="Inh","e4"="Inh","ZE"="Inh","E"="Inh",
"Ke5"="Inh","e5"="Inh","Re6"="Inh","e6"="Inh"))
# change character to factor
db_beh$condition <- factor(db_beh$condition, levels=c("Ie1","e1","SI","I",
"Ce2","e2","Be3","e3",
"Ee4","e4","ZE","E",
"Ke5","e5","Re6","e6"))
levels(db_beh$condition) <- paste0(levels(db_beh$condition),
c("-","+","+","-","+","-","+","+",
"+","-","-","+","-","+","-","-"))
# # # # # visualize phase 1 correctness # # # # #
fig1C <- ggplot(db_beh[db_beh$phase == 1,], aes(x=condition, y=Correct, col=excInh)) +
labs(title="Phase 1", y="% Correct",
x="Trial Types",col="Cond. Type") +
geom_hline(yintercept=0.5) +
stat_summary() +
scale_y_continuous(breaks = seq(0,1,0.1)) +
coord_cartesian(ylim = c(0.3,0.8)) +
theme_classic()
fig1C
head(db_beh)
# # # # # visualize phase 1 correctness # # # # #
fig1C <- ggplot(db_beh[db_beh$phase == 1,], aes(x=condition, y=Correct, col=excInh)) +
labs(title="Phase 1", y="% Correct",
x="Trial Types",col="Cond. Type") +
geom_hline(yintercept=0.5) +
stat_summary() +
scale_y_continuous(breaks = seq(0,1,0.1)) +
coord_cartesian(ylim = c(0.3,0.8)) +
theme_classic()
fig1C
# # # # # visualize phase 2 correctness # # # # #
fig1D <- ggplot(db_beh[db_beh$phase == 2,], aes(x=condition, y=Correct, col=excInh)) +
labs(title="Phase 2", y="% Correct",
x="Trial Types",col="Cond. Type") +
geom_hline(yintercept=0.5) +
stat_summary() +
scale_y_continuous(breaks = seq(0,1,0.1)) +
coord_cartesian(ylim = c(0.3,0.8)) +
theme_classic()
fig1D
fig2A <- ggplot(db_beh, aes(x=condition, y=Correct , col=as.factor(phase))) +
labs(title="% Correct and Trial Types", y="% Correct",
x="Trial Types",col="Phases") +
geom_hline(yintercept=0.5) +
stat_summary() +
theme_classic()
fig2A
fig1 <- ggarrange(fig1A,
ggarrange(fig1C,fig1D,ncol=2,labels = c("B","C"),
widths = c(1,2), common.legend = T,
legend = "right"),
labels = c("A",""),nrow=2)
fig1
colnames(db_beh)
colnames(db_beh)[colnames(db_beh)=="trials"]
# change and remove features
colnames(db_beh)[colnames(db_beh)=="trials"] <- "nBlocks"
colnames(db_beh)[colnames(db_beh)=="trials"]
db_beh$Zone.Type <- NULL
# # # # # # # # # # Remove bad participants # # # # # # # # # # # # # # # # ####
db_beh_acc <- db_beh[db_beh$phase == 1,] %>%
group_by(Participant.Private.ID,condition) %>%
summarise(accuracy = mean(Correct))
db_beh_acc
goodPart <- as.vector(NA)
for (i in 1:nSubj) {
temp <- db_beh_acc[db_beh_acc$Participant.Private.ID == subj[i],"accuracy"]
if (sum(temp > 0.6) == 4) {
goodPart <- c(goodPart,subj[i])
}
}
goodPart
temp
