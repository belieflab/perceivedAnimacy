temp1 <- f_SDTparam(temp0[temp0$index<=100,],cells)
genChar$sensit1[i] <- temp1$sensit
genChar$resCri1[i] <- temp1$resCri
}
if (nrow(temp0[temp0$index>150,]) > 1) {
genChar$corr2[i] <- mean(temp0$corr[temp0$index>100])
temp2 <- f_SDTparam(temp0[temp0$index>100,],cells)
genChar$sensit2[i] <- temp2$sensit
genChar$resCri2[i] <- temp2$resCri
}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# calculate SDT
temp <- f_SDTparam(temp0,cells)
genChar$sensit[i] <- temp$sensit
genChar$resCri[i] <- temp$resCri
genChar$h[i] <- temp$h
genChar$f[i] <- temp$f
genChar[i,grepl("TT",colnames(genChar))] <- temp$SDTtab
# add questionnaire
if (sum(genChar$workerId[i] == quest$workerId) > 0) {
genChar$age[i] <- quest$demo_age[genChar$workerId[i] == quest$workerId]
genChar$sex[i] <- quest$demo_sex[genChar$workerId[i] == quest$workerId]
genChar$paranoia[i] <- quest$paranoia[genChar$workerId[i] == quest$workerId]
genChar$rgpts_ref[i] <- quest$rgpts_ref[genChar$workerId[i] == quest$workerId]
genChar$rgpts_per[i] <- quest$rgpts_per[genChar$workerId[i] == quest$workerId]
beh$paranoia[beh$workerId == genChar$workerId[i]] <- genChar$paranoia[i]
beh$rgpts_ref[beh$workerId == genChar$workerId[i]] <- genChar$rgpts_ref[i]
beh$rgpts_per[beh$workerId == genChar$workerId[i]] <- genChar$rgpts_per[i]
} else {warning(genChar$workerId[i])}
}; remove(temp0,temp)
genChar$rgpts_ref_high <- ifelse(genChar$rgpts_ref <= 5, "average","elevated")
genChar$rgpts_per_high <- ifelse(genChar$rgpts_per <= 9, "average","elevated")
# at least one subscale elevated
genChar$rgpts_high <- ifelse(genChar$rgpts_ref_high == "elevated" |
genChar$rgpts_per_high == "elevated",1, 0)
# # # # # # # # # # remove bad participants # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
mean(genChar$corr,na.rm=T)
mean(genChar$corr1,na.rm=T)
mean(genChar$corr2,na.rm=T)
mean(genChar$sensit,na.rm=T)
mean(genChar$sensit1,na.rm=T)
mean(genChar$sensit2,na.rm=T)
plot(genChar$corr1,genChar$corr2)
plot(genChar$rt,genChar$sensit)
plot(genChar$taskDurationMin,genChar$sensit)
plot(genChar$taskDurationMin,genChar$rt)
plot(genChar$taskDurationMin,genChar$corr)
plot(genChar$corr,genChar$sensit)
# genChar$corr <- genChar$corr1
# genChar$sensit <- genChar$sensit1
# genChar$resCri <- genChar$resCri1
# good and bad participants
badParticipants <- union(genChar$workerId[genChar$corr <= 0.55 |
genChar$taskDurationMin <= 7],
names(table(beh$workerId))[table(beh$workerId)<=50])
goodParticipants <- intersect(genChar$workerId[genChar$corr > 0.55 &
genChar$taskDurationMin > 7],
names(table(beh$workerId))[table(beh$workerId)>50])
# remove trials from bad participants
genChar$remove <- T; beh$remove <- T
for (i in 1:length(goodParticipants)) {
genChar$remove[genChar$workerId == goodParticipants[i]] <- F
beh$remove[beh$workerId == goodParticipants[i]] <- F
}
genCharBad <- genChar[genChar$remove == T,]; genCharBad$remove <- NULL
genChar <- genChar[genChar$remove == F,]; genChar$remove <- NULL
behBad <- beh[beh$remove == T,]; behBad$remove <- NULL
beh <- beh[beh$remove == F,]; beh$remove <- NULL
# print data bases
write.csv(genChar,"figures_tables/genChar.csv",row.names = F)
write.csv(beh, "figures_tables/beh.csv",row.names = F)
# Remove all of the elements currently loaded in R
rm(list=ls(all=TRUE))
# # # # # # # # # # libraries and functions # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2) # ggplot
if (!require(ggpubr)) {install.packages("ggpubr")}; library(ggpubr) # ggarrange
if (!require(viridis)) {install.packages("viridis")}; library(viridis) # viridis
if (!require(lmerTest)) {install.packages("lmerTest")}; library(lmerTest) # lmer
source("functions.R")
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
beh <- read.csv("figures_tables/beh.csv")
genChar <- read.csv("figures_tables/genChar.csv")
discPos <- read.csv("../modelParametersRecovery/figures_tables/discsPositions.csv")
# # # # # # # # # # calculate features per trials # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
if (is.null(beh$Herror)) {
# create entropy variables
beh$HpathD1 <- beh$HpathD2 <- beh$HpathD3 <- beh$HpathD4 <- beh$HpathD5 <-
beh$HpathD6 <- beh$HpathS <- beh$HpathW <- beh$Herror <- NA
for (i in 1:nrow(beh)) {
# progress bar
# Sys.sleep(0.01)
setTxtProgressBar(txtProgressBar(min = 0, max = nrow(beh), style = 3,
width = 50, char = "="), i)
# check one trial
temp <- discPos[discPos$trialCond == beh$trialCond[i],]
# trial stopped before the display ended?
if (beh$rt[i] <= 4000) {
# 4000 ms / 120 frames = ms per frame. Then RT/33.33 = last_seen_frame
last_seen_frame <- floor(beh$rt[i]/(4000/120))
temp <- temp[temp$frame < last_seen_frame,]
}
# calculate entropy
beh$Herror[i] <- H_error(temp$wX,temp$wY,temp$sX,temp$sY)
beh$HpathW[i] <- H_path(temp$wX,temp$wY)
beh$HpathS[i] <- H_path(temp$sX,temp$sY)
beh$HpathD1[i] <- H_path(temp$d1X,temp$d1Y)
beh$HpathD2[i] <- H_path(temp$d2X,temp$d2Y)
beh$HpathD3[i] <- H_path(temp$d3X,temp$d3Y)
beh$HpathD4[i] <- H_path(temp$d4X,temp$d4Y)
beh$HpathD5[i] <- H_path(temp$d5X,temp$d5Y)
beh$HpathD6[i] <- H_path(temp$d6X,temp$d6Y)
}
# print data bases
print_csv <- 0
if (print_csv == 1) {
write.csv(genChar,"figures_tables/genChar.csv",row.names = F)
write.csv(beh, "figures_tables/beh.csv",row.names = F)
}
} # end if we need to calculate entropies per trials
write.csv(genChar,"figures_tables/genChar.csv",row.names = F)
write.csv(beh, "figures_tables/beh.csv",row.names = F)
# create variables with clear labeling
beh$sdtTrials <- factor(beh$cells,levels=c("R1_TTchase","R1_TTmirror","R0_TTchase","R0_TTmirror"))
levels(beh$sdtTrials) <- c("hit","FA","miss","CR")
beh$respType <- factor(beh$chaseR,levels=c("1","0"))
levels(beh$respType) <- c("Chase","No Chase")
beh$scParanoia <- scale(beh$paranoia)[1:nrow(beh)]
# Dichotomous Paranoia
beh$rgpts_ref_high <- ifelse(beh$rgpts_ref <= 5, "average","elevated")
beh$rgpts_per_high <- ifelse(beh$rgpts_per <= 9, "average","elevated")
# at least one subscale elevated
beh$rgpts_high <- ifelse(beh$rgpts_ref_high == "elevated" |
beh$rgpts_per_high == "elevated", 1, 0)
# trial type order
beh$trialType <- factor(beh$trialType, levels = c("mirror","chase"))
# # # # # # # # # # Statistical Analysis# # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
mA0 <- lmer(Herror~chaseR*trialType+(1|workerId),data=beh, REML = FALSE)
mA <- lmer(Herror~scParanoia*chaseR*trialType+(1|workerId),data=beh, REML = FALSE)
anova(mA0,mA)
mB0 <- lmer(HpathW~chaseR*trialType+(1|workerId),data=beh, REML = FALSE)
mB <- lmer(HpathW~scParanoia*chaseR*trialType+(1|workerId),data=beh, REML = FALSE)
anova(mB0,mB)
mC0 <- lmer(HpathS~chaseR*trialType+(1|workerId),data=beh, REML = FALSE)
mC <- lmer(HpathS~scParanoia*chaseR*trialType+(1|workerId),data=beh, REML = FALSE)
anova(mC0,mC)
mD0 <- lmer(rt~chaseR*trialType+(1|workerId),data=beh, REML = FALSE)
mD <- lmer(rt~scParanoia*chaseR*trialType+(1|workerId),data=beh, REML = FALSE)
anova(mD0,mD)
sMA <- step(mA);sMA
summary(lmer(Herror ~ trialType + (1 | workerId), data=beh, REML = FALSE))
sMB <- step(mB);sMB
summary(lmer(HpathW ~ scParanoia * chaseR * trialType + (1 | workerId),
data=beh, REML = FALSE))
sMC <- step(mC);sMC
summary(lmer(HpathS ~ scParanoia + chaseR + trialType + (1 | workerId) + scParanoia:chaseR,
data=beh, REML = FALSE))
sMD <- step(mD);sMD
summary(lmer(rt ~ scParanoia + chaseR + trialType + (1 | workerId) +
scParanoia:chaseR + chaseR:trialType,
data=beh, REML = FALSE))
summary(lmer(rt ~ scParanoia * chaseR * trialType + (1 | workerId),
data=beh, REML = FALSE))
# # # # # # # # # # figures: visualization# # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
fig8 <- f_create_fig8(beh,sMA,sMB,sMC,sMD)
fig8
fig9 <- f_create_fig9(beh)
fig9
y_x <- lmer(rt ~ HpathW + (1 | workerId), data = beh, REML = F); summary(y_x)
y_x <- lmer(rt ~ HpathW + (1 | workerId), data = beh, REML = F); summary(y_x)
y_x <- lmer(rt ~ HpathS + (1 | workerId), data = beh, REML = F); summary(y_x)
y_x <- lmer(HpathW ~ scParanoia + (1 | workerId), data = beh, REML = F); summary(y_x)
y_xm <- lmer(HpathW ~ scParanoia + rt + (1 | workerId), data = beh, REML = F); summary(y_xm)
x_m <- lmer(rt ~ scParanoia + (1 | workerId), data = beh, REML = F); summary(x_m)
fig8
# # # # # # # # # # figures: visualization# # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
fig8 <- f_create_fig8(beh,sMA,sMB,sMC,sMD)
# Remove all of the elements currently loaded in R
rm(list=ls(all=TRUE))
# # # # # # # # # # libraries and functions # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2) # ggplot
if (!require(ggpubr)) {install.packages("ggpubr")}; library(ggpubr) # ggarrange
if (!require(report)) {install.packages("report")}; library(report) # report_table
if (!require(dplyr)) {install.packages("dplyr")}; library(dplyr) # revalue
# if (!require(RCurl)) {install.packages("RCurl")}; library(RCurl)
# oneSubj <- "https://belieflab.yale.edu/perceivedAnimacy/data/animacy_A1DUPOUC9RNU4L.csv"
# oneSubj <- getURL(oneSubj)
source("functions.R")
# # # # # # download data from terminal with: # # # # # #
# # # Specific # # #
# only if we are in "C:\xampp\htdocs\perceivedAnimacy\data\behaviour"
# then
# scp sc3228@10.5.121.48:/var/www/belieflab.yale.edu/perceivedAnimacy/data/* .
# # # General # # #
# scp sc3228@10.5.121.48:/var/www/belieflab.yale.edu/perceivedAnimacy/data/* C:\xampp\htdocs\perceivedAnimacy\data\behaviour
# test ID:
# A2FGKKWP33DFWS
# missing ID:
cloRes <- list.files("../../data/questionnaires/cloudResearch_details")
cloRes1 <- read.csv("../../data/questionnaires/cloudResearch_details/perceivedAnimacy_SC [Psychology Detection Game(_ 30 minutes)] (364564).csv")
cloRes1$sample <- "pilot"
cloRes2 <- read.csv("../../data/questionnaires/cloudResearch_details/perceivedAnimacy_SC100 [Psychology Detection Game(_ 30 minutes)] (364802).csv")
cloRes2$sample <- "experiment100"
cloRes3 <- read.csv("../../data/questionnaires/cloudResearch_details/perceivedAnimacy_SC50 [Psychology Detection Game(_ 30 minutes)] (366947).csv")
cloRes3$sample <- "experiment50"
cloRes <- rbind(cloRes1,cloRes2,cloRes3)
cloRes <- cloRes[cloRes$ApprovalStatus != "Not Submitted",]
cloRes <- cloRes[order(cloRes$AmazonIdentifier)]
javScr <- substr(list.files("../../data/behaviour"),9,nchar(list.files("../../data/behaviour"))-4)
workerIdCloudRes <- intersect(cloRes$AmazonIdentifier,javScr)
outersect(cloRes$AmazonIdentifier,javScr)
remove(javScr,cloRes3,cloRes2,cloRes1)
# test ID:
# A2FGKKWP33DFWS
# missing ID:
cloRes <- list.files("../../data/questionnaires/cloudResearch_details")
cloRes1 <- read.csv("../../data/questionnaires/cloudResearch_details/perceivedAnimacy_SC [Psychology Detection Game(_ 30 minutes)] (364564).csv")
cloRes1$sample <- "pilot"
cloRes2 <- read.csv("../../data/questionnaires/cloudResearch_details/perceivedAnimacy_SC100 [Psychology Detection Game(_ 30 minutes)] (364802).csv")
cloRes2$sample <- "experiment100"
cloRes3 <- read.csv("../../data/questionnaires/cloudResearch_details/perceivedAnimacy_SC50 [Psychology Detection Game(_ 30 minutes)] (366947).csv")
cloRes3$sample <- "experiment50"
cloRes <- rbind(cloRes1,cloRes2,cloRes3)
cloRes <- cloRes[cloRes$ApprovalStatus != "Not Submitted",]
cloRes <- cloRes[order(cloRes$AmazonIdentifier)]
cloRes
cloRes$AmazonIdentifier
cloRes$AmazonIdentifier
order(cloRes$AmazonIdentifier)
cloRes <- cloRes[order(cloRes$AmazonIdentifier)]
# test ID:
# A2FGKKWP33DFWS
# missing ID:
cloRes <- list.files("../../data/questionnaires/cloudResearch_details")
cloRes1 <- read.csv("../../data/questionnaires/cloudResearch_details/perceivedAnimacy_SC [Psychology Detection Game(_ 30 minutes)] (364564).csv")
cloRes1$sample <- "pilot"
cloRes2 <- read.csv("../../data/questionnaires/cloudResearch_details/perceivedAnimacy_SC100 [Psychology Detection Game(_ 30 minutes)] (364802).csv")
cloRes2$sample <- "experiment100"
cloRes3 <- read.csv("../../data/questionnaires/cloudResearch_details/perceivedAnimacy_SC50 [Psychology Detection Game(_ 30 minutes)] (366947).csv")
cloRes3$sample <- "experiment50"
cloRes <- rbind(cloRes1,cloRes2,cloRes3)
head)cloRes
head(cloRes)
cloRes <- rbind(cloRes1,cloRes2,cloRes3)
cloRes <- cloRes[cloRes$ApprovalStatus != "Not Submitted",]
cloRes <- cloRes[order(cloRes$AmazonIdentifier),]
cloRes
javScr <- substr(list.files("../../data/behaviour"),9,nchar(list.files("../../data/behaviour"))-4)
workerIdCloudRes <- intersect(cloRes$AmazonIdentifier,javScr)
workerIdCloudRes
length)workerIdCloudRes
length(workerIdCloudRes)
outersect(cloRes$AmazonIdentifier,javScr)
remove(javScr,cloRes3,cloRes2,cloRes1)
# behaviour
behDataFilesNames <- list.files("../../data/behaviour")
behDataFilesNames <- behDataFilesNames[order(behDataFilesNames)]
workerIdBeh <- substr(behDataFilesNames,9,nchar(behDataFilesNames)-4)
sum(workerIdCloudRes[order(workerIdCloudRes)] == workerIdBeh[order(workerIdBeh)])
# number of participants
nSubj <- length(workerIdBeh)
nSubj
# pool behavioural data
genChar <- data.frame(matrix(NA,nrow=nSubj,ncol=4))
colnames(genChar) <- c("workerId","sample","taskDurationMin","expDurMinCloudRes")
for (i in 1:nSubj) {
temp <- read.csv(paste0("../../data/behaviour/",behDataFilesNames[i]))
if (i == 1) {
beh <- temp
} else {
beh <- rbind(beh,temp)
}
# read files
genChar[i,1] <- unique(temp$workerId)[unique(temp$workerId) != ""]
boolFilter <- cloRes$AmazonIdentifier == genChar[i,1]
genChar[i,2] <- cloRes$sample[boolFilter]
genChar[i,3] <- (sum(as.numeric(temp$rt[temp$rt != "null"]))/1000)/60
genChar[i,4] <- strptime(substr(cloRes$CompletionTime[boolFilter],
unlist(gregexpr("2022 ", cloRes$CompletionTime[boolFilter]))+5,
nchar(cloRes$CompletionTime[boolFilter])),"%I:%M:%S %p") -
strptime(substr(cloRes$StartTime[boolFilter],
unlist(gregexpr("2022 ", cloRes$StartTime[boolFilter]))+5,
nchar(cloRes$StartTime[boolFilter])),"%I:%M:%S %p")
}; rm(temp,boolFilter)
genChar <- genChar[order(genChar$workerId),]
# questionnaires
questDataFilesNames <- list.files("../../data/questionnaires")
# read files
quest <- read.csv(paste0("../../data/questionnaires/",questDataFilesNames[3]))
quest <- quest[-(1:2),]
quest <- quest[16:nrow(quest),]
quest <- quest[order(quest$workerId),]
quest$questDurationMin <- as.numeric(as.POSIXlt(quest$EndDate) - as.POSIXlt(quest$StartDate))
# workerId vector the intersect between quest and bheaviour
workerId <- intersect(quest$workerId,workerIdBeh)
if (sum(genChar$workerId == quest$workerId)==length(workerId)) {
genChar$questDurationMin <- quest$questDurationMin
genChar$expDurationMin <- genChar$taskDurationMin + genChar$questDurationMin
}
genChar$workerId
sum(genChar$workerId == quest$workerId)==length(workerId)
if (sum(genChar$workerId == quest$workerId)==length(workerId)) {
genChar$questDurationMin <- quest$questDurationMin
genChar$expDurationMin <- genChar$taskDurationMin + genChar$questDurationMin
}
columnsToInteger <- colnames(quest)[grepl("rgpts",colnames(quest))][1:18]
columnsToInteger <- c(columnsToInteger,"demo_age")
for (i in 1:length(columnsToInteger)) {
quest[,columnsToInteger[i]] <- as.integer(quest[,columnsToInteger[i]])
}
# sum paranoia scores
quest$rgpts_ref <- rowSums(quest[,grepl("rgpts_ref",colnames(quest))])
quest$rgpts_per <- rowSums(quest[,grepl("rgpts_per",colnames(quest))])
quest$paranoia <- quest$rgpts_ref + quest$rgpts_per
# # # # Behaviour # # # #
# remove irrelevant columns
beh <- beh[!is.na(beh$index),]
# code responses: 1 = chase, 0 = no chase (mirror)
beh$chaseR <- as.integer(ifelse(beh$key_press == "49",1,0))
# reaction time to numeric
beh$rt <- as.numeric(beh$rt)
# remove bad trials
beh <- beh[beh$rt > 500 & beh$rt < 8000,]
# trialType instead of test_part
beh$test_part <- ifelse(beh$test_part == "chase","chase","mirror")
colnames(beh)[grepl("test_part",colnames(beh))] <- "trialType"
# correct or incorrect
beh$response <- ifelse(beh$response == "correct",1,0)
colnames(beh)[grepl("response",colnames(beh))] <- "corr"
# trial conditions (i.e., which displays)
beh$trialCond <- paste0(substr(beh$stim,6,nchar(beh$stim)-7),"_",beh$trialType)
# get the cells for the SDT contingency table (pressed key and trial type)
beh$cells <- paste0("R",beh$chaseR,"_TT",beh$trialType)
# NOTE: events must be ordered as follows: hit, FA, Ms, CR
# name IN ORDER the cells
cells <- c("R1_TTchase","R1_TTmirror","R0_TTchase","R0_TTmirror")
# filter by relevant columns
relCols <- c("workerId","trialType","stim","trialCond","index","rt","chaseR",
"corr","cells")
beh <- beh[,relCols]
# add questionnaires columns
beh$paranoia <- beh$rgpts_per <- beh$rgpts_ref <- NA
# add behavioural columns
genChar$rt <- genChar$corr <- genChar$age <- genChar$sex <- NA
genChar$corr1 <- genChar$corr2 <- NA
genChar$resCri1 <- genChar$resCri2 <- NA
genChar$sensit1 <- genChar$sensit2 <- NA
# add SDT columns
genChar$f <- genChar$h <- genChar$resCri <- genChar$sensit <- NA
genChar <- cbind(genChar,data.frame(R1_TTchase=NA, R1_TTmirror=NA,
R0_TTchase=NA, R0_TTmirror=NA))
# add questionnaires columns
genChar$paranoia <- genChar$rgpts_per <- genChar$rgpts_ref <- NA
for (i in 1:nSubj) {
temp0 <- beh[beh$workerId == workerId[i],]
# temp0 <- temp0[temp0$index <= 100,]
genChar$rt[i] <- mean(temp0$rt)
genChar$corr[i] <- mean(temp0$corr)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
if (nrow(temp0[temp0$index<=50,]) > 1) {
genChar$corr1[i] <- mean(temp0$corr[temp0$index<=100])
temp1 <- f_SDTparam(temp0[temp0$index<=100,],cells)
genChar$sensit1[i] <- temp1$sensit
genChar$resCri1[i] <- temp1$resCri
}
if (nrow(temp0[temp0$index>150,]) > 1) {
genChar$corr2[i] <- mean(temp0$corr[temp0$index>100])
temp2 <- f_SDTparam(temp0[temp0$index>100,],cells)
genChar$sensit2[i] <- temp2$sensit
genChar$resCri2[i] <- temp2$resCri
}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# calculate SDT
temp <- f_SDTparam(temp0,cells)
genChar$sensit[i] <- temp$sensit
genChar$resCri[i] <- temp$resCri
genChar$h[i] <- temp$h
genChar$f[i] <- temp$f
genChar[i,grepl("TT",colnames(genChar))] <- temp$SDTtab
# add questionnaire
if (sum(genChar$workerId[i] == quest$workerId) > 0) {
genChar$age[i] <- quest$demo_age[genChar$workerId[i] == quest$workerId]
genChar$sex[i] <- quest$demo_sex[genChar$workerId[i] == quest$workerId]
genChar$paranoia[i] <- quest$paranoia[genChar$workerId[i] == quest$workerId]
genChar$rgpts_ref[i] <- quest$rgpts_ref[genChar$workerId[i] == quest$workerId]
genChar$rgpts_per[i] <- quest$rgpts_per[genChar$workerId[i] == quest$workerId]
beh$paranoia[beh$workerId == genChar$workerId[i]] <- genChar$paranoia[i]
beh$rgpts_ref[beh$workerId == genChar$workerId[i]] <- genChar$rgpts_ref[i]
beh$rgpts_per[beh$workerId == genChar$workerId[i]] <- genChar$rgpts_per[i]
} else {warning(genChar$workerId[i])}
}; remove(temp0,temp)
genChar$rgpts_ref_high <- ifelse(genChar$rgpts_ref <= 5, "average","elevated")
genChar$rgpts_per_high <- ifelse(genChar$rgpts_per <= 9, "average","elevated")
# at least one subscale elevated
genChar$rgpts_high <- ifelse(genChar$rgpts_ref_high == "elevated" |
genChar$rgpts_per_high == "elevated",1, 0)
# # # # # # # # # # remove bad participants # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
mean(genChar$corr,na.rm=T)
mean(genChar$corr1,na.rm=T)
mean(genChar$corr2,na.rm=T)
mean(genChar$sensit,na.rm=T)
# # # # # # # # # # remove bad participants # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
mean(genChar$corr,na.rm=T)
mean(genChar$corr1,na.rm=T)
mean(genChar$corr2,na.rm=T)
mean(genChar$sensit,na.rm=T)
mean(genChar$sensit1,na.rm=T)
mean(genChar$sensit2,na.rm=T)
plot(genChar$corr1,genChar$corr2)
plot(genChar$rt,genChar$sensit)
plot(genChar$taskDurationMin,genChar$sensit)
plot(genChar$taskDurationMin,genChar$rt)
plot(genChar$taskDurationMin,genChar$corr)
plot(genChar$corr,genChar$sensit)
# good and bad participants
badParticipants <- union(genChar$workerId[genChar$corr <= 0.55 |
genChar$taskDurationMin <= 7],
names(table(beh$workerId))[table(beh$workerId)<=50])
goodParticipants <- intersect(genChar$workerId[genChar$corr > 0.55 &
genChar$taskDurationMin > 7],
names(table(beh$workerId))[table(beh$workerId)>50])
length(badParticipants)
length(goodParticipants)
# remove trials from bad participants
genChar$remove <- T; beh$remove <- T
for (i in 1:length(goodParticipants)) {
genChar$remove[genChar$workerId == goodParticipants[i]] <- F
beh$remove[beh$workerId == goodParticipants[i]] <- F
}
genCharBad <- genChar[genChar$remove == T,]; genCharBad$remove <- NULL
genChar <- genChar[genChar$remove == F,]; genChar$remove <- NULL
behBad <- beh[beh$remove == T,]; behBad$remove <- NULL
beh <- beh[beh$remove == F,]; beh$remove <- NULL
# print data bases
print_csv <- 0
write.csv(genChar,"figures_tables/genChar.csv",row.names = F)
write.csv(beh, "figures_tables/beh.csv",row.names = F)
# # # # # # # # # # visualization # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
fig1 <- f_create_fig1(genChar)
fig1
fig2 <- f_create_fig2(genChar)
fig2
fig3 <- f_create_fig3(genChar)
fig4 <- f_create_fig4(genChar)
fig5 <- f_create_fig5(beh,genChar)
print_fig <- 0
if (print_fig == 1) {
ggsave("figures_tables/fig1.png",
plot = fig1, width = 14, height = 7, units = "cm",
dpi = 1200, device='png', limitsize = T)
ggsave("figures_tables/fig2.png",
plot = fig2, width = 14, height = 14, units = "cm",
dpi = 1200, device='png', limitsize = T)
ggsave("figures_tables/fig3.png",
plot = fig3, width = 14, height = 14, units = "cm",
dpi = 1200, device='png', limitsize = T)
ggsave("figures_tables/fig4.png",
plot = fig4, width = 14, height = 14, units = "cm",
dpi = 1200, device='png', limitsize = T)
ggsave("figures_tables/fig5.png",
plot = fig5, width = 14, height = 7, units = "cm",
dpi = 1200, device='png', limitsize = T)
}
fig5
fig4
fig3
# # # # # # # # # # model fit # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# model fit
modFitFilesNames <- paste0("../participantModelFit/outputs/",
list.files("../participantModelFit/outputs"))
# model fit worker ID
modFitWorkerId <- substr(modFitFilesNames,32,nchar(modFitFilesNames)-13)
for (i in 1:length(modFitFilesNames)) {
if (sum(modFitWorkerId[i] == genChar$workerId) > 0) {
load(modFitFilesNames[i])
temp <- data.frame(modFitWorkerId[i],t(output$params$wMean),output$modPerformance)
colnames(temp)[1:4] <- c("workerId", rownames(output$params))
if (i == 1) {
modelFit <- temp
} else {
modelFit <- rbind(modelFit,temp)
}
} # only if is included in genChar
}
modelFit
modFitFilesNames
modelFit$workerId
genChar$workerId
modelFit
