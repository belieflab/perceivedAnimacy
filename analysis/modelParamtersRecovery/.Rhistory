print("hello")
# Remove all of the elements currently loaded in R
rm(list=ls(all=TRUE))
# add work directory
setwd(file.path(dirname(rstudioapi::getActiveDocumentContext()$path)))
# # # # # # # # # # functions # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
source("functions.R")
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
discsDistances <- read.csv("figures_tables/discsDistances.csv")
# discsAngles <- read.csv("figures_tables/discsAngles.csv")
# discsPositions <- read.csv("figures_tables/discsPositions.csv")
# get the simulated parametric space
if (sum(list.files("figures_tables") == "sdtParameters.csv") > 0) {
sdtParameters <- read.csv("figures_tables/sdtParameters.csv")
} else {
warning("Run script visualize_parametric_space.R")
}
# # # # # # # # # # simulate with good parameters # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# select only the "good" parameters so we will recover those parameters
sdtParameters$goodPar <- ifelse(sdtParameters$sensit > 0.8 &
(sdtParameters$resCri < 1.2 &
sdtParameters$resCri > -1.2),"good","bad")
bestSdtPars <- sdtParameters[sdtParameters$goodPar == "good",]
# # # # if you don't want to simulate with multiple eta values (slow)
params <- data.frame(mc=bestSdtPars$mc,
theta=bestSdtPars$theta,
eta=0.75) # eta won't be used
# select nTrialsPerCond trials per condition (chase/mirror)
nTrialsPerCond <- 80
randDist <- f_randNTrials(discsDistances,nTrialsPerCond)
sum(list.files("figures_tables") == "simPars.csv" |
list.files("figures_tables") == "simTrials.csv" |
list.files("figures_tables") == "randDist.csv") == 0
# select nTrialsPerCond trials per condition (chase/mirror)
nTrialsPerCond <- 100
randDist <- f_randNTrials(discsDistances,nTrialsPerCond)
# for loop for parameters set
for (p in 1:nrow(params)) {
message(paste("set of parameters:",p))
if (p == 1) {
sim <- f_detMod(randDist, params[p,])
simPars <- sim$params
simTrials <- sim$dbTrials
} else {
sim <- f_detMod(randDist, params[p,])
simPars <- rbind(simPars,sim$params)
simTrials <- rbind(simTrials,sim$dbTrials)
}
}; remove(sim)
# add participant (parameters set) ID
simPars$part <- paste0(simPars$mc,"_",simPars$theta,"_",simPars$eta)
simTrials$part <- paste0(simTrials$mc,"_",simTrials$theta,"_",simTrials$eta)
# write the data.frames in csv inside "figures_tables" folder
write.csv(simPars,"figures_tables/simPars.csv", row.names = F)
write.csv(simTrials,"figures_tables/simTrials.csv", row.names = F)
write.csv(randDist,"figures_tables/simRandDist.csv", row.names = F)
# if randDist, simPars, and simTrials are already write, then just read the
# files and not simulate nor write them again.
if (sum(list.files("figures_tables") == "simPars.csv" |
list.files("figures_tables") == "simTrials.csv" |
list.files("figures_tables") == "randDist.csv") == 0) {
# for loop for parameters set
for (p in 1:nrow(params)) {
message(paste("set of parameters:",p))
if (p == 1) {
sim <- f_detMod(randDist, params[p,])
simPars <- sim$params
simTrials <- sim$dbTrials
} else {
sim <- f_detMod(randDist, params[p,])
simPars <- rbind(simPars,sim$params)
simTrials <- rbind(simTrials,sim$dbTrials)
}
}; remove(sim)
# add participant (parameters set) ID
simPars$part <- paste0(simPars$mc,"_",simPars$theta,"_",simPars$eta)
simTrials$part <- paste0(simTrials$mc,"_",simTrials$theta,"_",simTrials$eta)
# write the data.frames in csv inside "figures_tables" folder
write.csv(simPars,"figures_tables/simPars.csv", row.names = F)
write.csv(simTrials,"figures_tables/simTrials.csv", row.names = F)
write.csv(randDist,"figures_tables/simRandDist.csv", row.names = F)
} else {
warning("Simulations with good parameters are already done. Use parameters_recovery.R")
}
# Remove all of the elements currently loaded in R
rm(list=ls(all=TRUE))
# add work directory
setwd(file.path(dirname(rstudioapi::getActiveDocumentContext()$path)))
# # # # # # # # # # functions # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
source("functions.R")
sum(list.files("figures_tables") == "simPars.csv" |
list.files("figures_tables") == "simTrials.csv" |
list.files("figures_tables") == "simRandDist.csv") > 0
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# get artificial agents simulated with "good" parameters
if (sum(list.files("figures_tables") == "simPars.csv" |
list.files("figures_tables") == "simTrials.csv" |
list.files("figures_tables") == "simRandDist.csv") > 0) {
simPars <- read.csv("figures_tables/simPars.csv")
simTrials <- read.csv("figures_tables/simTrials.csv")
randDist <- read.csv("figures_tables/simRandDist.csv")
} else {
warning("Run script simulate_good_parameters.R")
}
head(simPars)
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# get artificial agents simulated with "good" parameters
if (sum(list.files("figures_tables") == "simPars.csv" |
list.files("figures_tables") == "simTrials.csv" |
list.files("figures_tables") == "simRandDist.csv") > 0) {
simPars <- read.csv("figures_tables/simPars.csv")
simTrials <- read.csv("figures_tables/simTrials.csv")
randDist <- read.csv("figures_tables/simRandDist.csv")
} else {
warning("Run script simulate_good_parameters.R")
}
# # # # # # # # # # parameters recovery # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# get all "participants" vector (i.e., set of parameters)
simParticip <- unique(simPars$part)
range(simPars$mc)
range(simPars$theta)
range(simPars$eta)
# parameters for fitting algorithm based on mc, theta, and eta ranges
fitPars <- list(mcRange = c(20,100),
thetaRange = c(50,200),
etaRange = c(0.55,0.95),
binsSize = data.frame(mc=30,theta=30,eta=30))
# add columns which will be filled with the fitting algorithm
simPars$negSumLog <- simPars$hitRate <-
simPars$eta_fit_var <- simPars$theta_fit_var <- simPars$mc_fit_var <-
simPars$eta_fit_wm <- simPars$theta_fit_wm <- simPars$mc_fit_wm <- NA
# create list to get posterior densities
posterior_densities <- list()
# get starting time
start_time <- Sys.time()
rm(start_time)
dim(simPars)
dim(randDist)
# Remove all of the elements currently loaded in R
rm(list=ls(all=TRUE))
# # # # # # # # # # libraries # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2) # ggplot()
if (!require(ggpubr)) {install.packages("ggpubr")}; library(ggpubr) # ggarrange()
if (!require(reshape2)) {install.packages("reshape2")}; library(reshape2) # melt()
if (!require(viridis)) {install.packages("viridis")}; library(viridis) # viridis()
if (!require(plyr)) {install.packages("plyr")}; library(plyr) # revalue()
if (!require(dplyr)) {install.packages("dplyr")}; library(dplyr)
# # # # # # # # # # functions # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
source("functions.R")
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # import stimuli .txt data (from Ben van Buren) this are 600 8sec videos
loc <- paste0(getwd(),"/van_Buren_stimuli/chasing_detection_stimuli")
db1 <- read.table(paste0(loc,"/chasing/chasing_frames.txt"))
getwd()
"../../chasing/chasing_frames.txt"
db1 <- read.table("../../stim/van_Buren_stimuli/chasing_detection_stimuli/chasing/chasing_frames.txt"))
db1 <- read.table("../../stim/van_Buren_stimuli/chasing_detection_stimuli/chasing/chasing_frames.txt")
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # import stimuli .txt data (from Ben van Buren) this are 600 8sec videos
loc <- paste0(getwd(),"../../stim/van_Buren_stimuli/chasing_detection_stimuli")
loc
db1 <- read.table(paste0(loc,"/chasing/chasing_frames.txt"))
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # import stimuli .txt data (from Ben van Buren) this are 600 8sec videos
db1 <- read.table("../../stim/van_Buren_stimuli/chasing_detection_stimuli/chasing/chasing_frames.txt")
db1 <- read.table("../../stim/van_Buren_stimuli/chasing_detection_stimuli/mirror_chasing/mirror_chasing_frames.txt")
db1 <- read.table(paste0(loc,"/chasing/chasing_frames.txt"))
dim(db1)
head(db1)
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # import stimuli .txt data (from Ben van Buren) this are 600 8sec videos
db1 <- read.table("../../stim/van_Buren_stimuli/chasing_detection_stimuli/chasing/chasing_frames.txt")
getwd()
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # import stimuli .txt data (from Ben van Buren) this are 600 8sec videos
db1 <- read.table("../../stim/van_Buren_stimuli/chasing_detection_stimuli/chasing/chasing_frames.txt")
db2 <- read.table("../../stim/van_Buren_stimuli/chasing_detection_stimuli/mirror_chasing/mirror_chasing_frames.txt")
# combine databases
db <- data.frame(trialType=c(rep("chase",nrow(db1)),
rep("mirror",nrow(db2))),
rbind(db1,db2))
# colomn names titles
colnames(db)[-1] <- c("trial","frame","wX","wY","sX","sY",
"d1X","d1Y","d2X","d2Y",
"d3X","d3Y","d4X","d4Y",
"d5X","d5Y","d6X","d6Y")
# create the trial condition variable
db$trialCond <- paste0(db$trial,"_",db$trialType)
# discs names (one wolf, one sheep, and 6 distractions)
elem <- c("w","s","d1","d2","d3","d4","d5","d6")
# create data.frame with the combinations of the 8 elements
allRelations <- data.frame(t(combn(elem,2)))
# combine the name of each combination
allRelations$name <- paste0(allRelations[,1],"_",allRelations[,2])
# create distance (dist) and angle (angl) data frames
dist <- angl <- data.frame(trialType=db$trialType,trial=db$trial,
frame=db$frame,trialCond=db$trialCond)
# get distance and angle between all discs
for (i in 1:nrow(allRelations)) {
from <- db[,grepl(allRelations[i,1],colnames(db))]
to <- db[,grepl(allRelations[i,2],colnames(db))]
colnames(from) <- colnames(to) <- c("x","y")
## ## f_normAngle is a function that is in "function.R"
temp <- f_normAngle(from,to)
# distances and angles
dist <- data.frame(dist,temp$norm)
colnames(dist)[ncol(dist)] <- paste0("d_",allRelations$name[i])
angl <- data.frame(angl,temp$angl)
colnames(angl)[ncol(angl)] <- paste0("a_",allRelations$name[i])
}; remove(from,to,temp,i)
# vector with multiple memory capacities
mc <- seq(6,120,by=6)
# vector with multiple distance threshold
theta <- seq(15,300,by=15)
# create combinations of all previous paramters (mc and theta)
params <- data.frame(mc=rep(mc,length(theta)),theta=rep(theta,each=length(mc)))
## ## f_SDTparamExplor is a function that is in "function.R" (NOTE: is slow)
# if there is already sdtPars, then don't run
if (sum(list.files()=="sdtPars.csv")==0) {
sdtPars <- f_SDTparamExplor(dist,params)
# write the results in a csv
write.csv(sdtPars,"sdtPars.csv")
} else {
# if you have already saved the results, read the csv
sdtPars <- read.csv("sdtPars.csv")
}
list.files()
getwd()
sum(list.files("figures_tables")=="sdtPars.csv")==0
## ## f_SDTparamExplor is a function that is in "function.R" (NOTE: is slow)
# if there is already sdtPars, then don't run
if (sum(list.files("figures_tables")=="sdtPars.csv")==0) {
sdtPars <- f_SDTparamExplor(dist,params)
# write the results in a csv
write.csv(sdtPars,"sdtPars.csv")
} else {
# if you have already saved the results, read the csv
sdtPars <- read.csv("sdtPars.csv")
}
(sum(list.files("figures_tables")=="sdtPars.csv")==0)
## ## f_SDTparamExplor is a function that is in "function.R" (NOTE: is slow)
# if there is already sdtPars, then don't run
if (sum(list.files("figures_tables")=="sdtPars.csv")==0) {
sdtPars <- f_SDTparamExplor(dist,params)
# write the results in a csv
write.csv(sdtPars,"figures_tables/sdtPars.csv")
} else {
# if you have already saved the results, read the csv
sdtPars <- read.csv("figures_tables/sdtPars.csv")
}
head(sdtPars)
## ## f_SDTparamExplor is a function that is in "function.R" (NOTE: is slow)
# if there is already sdtPars, then don't run
if (sum(list.files("figures_tables")=="sdtPars.csv")==0) {
sdtPars <- f_SDTparamExplor(dist,params)
# write the results in a csv
write.csv(sdtPars,"figures_tables/sdtPars.csv")
} else {
# if you have already saved the results, read the csv
sdtPars <- read.csv("figures_tables/sdtPars.csv")
}
head(sdtPars)
getwd()
## ## f_SDTparamExplor is a function that is in "function.R" (NOTE: is slow)
# if there is already sdtPars, then don't run
if (sum(list.files("figures_tables")=="sdtPars.csv")==0) {
sdtPars <- f_SDTparamExplor(dist,params)
# write the results in a csv
write.csv(sdtPars,"figures_tables/sdtPars.csv")
} else {
# if you have already saved the results, read the csv
sdtPars <- read.csv("figures_tables/sdtPars.csv")
}
head(sdtPars)
# write the results in a csv
write.csv(sdtPars,"figures_tables/sdtPars.csv",row.names = F)
# obtain the marginals of the parametric space
# marginal for memory capacity (mc)
mcMarg <- sdtPars %>% group_by(mc) %>%
summarize(mSensit=sum(sensit),mResCri=sum(resCri))
# marginal for distance threshold (theta)
thetaMarg <- sdtPars %>% group_by(theta) %>%
summarize(mSensit=sum(sensit),mResCri=sum(resCri))
# get the set of paramters that have a larger SDT d' (sensitivity)
sdtPars[sdtPars$sensit==max(sdtPars$sensit),]
# get the set of parameters that have a 'reasonable' (arbitrary 1.5 of d')
sdtPars[sdtPars$sensit>1.5,]
# # # plot the parametric space
# difference between d' (discrimination) and C (response criterion)
p_diff <- ggplot(sdtPars, aes(x=as.factor(mc),y=as.factor(theta),fill=sensit-abs(resCri))) +
labs(x = expression(Memory~Capacity~(tau)),
y = expression(Proximity~Threshold~(theta)),fill="d'-|C|") +
geom_raster(interpolate = T) +
scale_y_discrete(breaks = seq(15,300,by=30)) +
scale_x_discrete(breaks = seq(6,120,by=12)) +
scale_fill_gradient2(low="#0000FFFF",mid="#FFFFFFFF",high="#FF0000FF") +
coord_fixed() +
theme_classic()
# d' plot
p_dPrime <- ggplot(sdtPars, aes(x=as.factor(mc),y=as.factor(theta),fill=sensit)) +
labs(x = expression(Memory~Capacity~(tau)),
y = expression(Proximity~Threshold~(theta)),fill="d'") +
geom_raster(interpolate = T) +
scale_y_discrete(breaks = seq(15,300,by=30)) +
scale_x_discrete(breaks = seq(6,120,by=12)) +
scale_fill_gradient2(low="#0000FFFF",mid="#FFFFFFFF",high="#FF0000FF") +
coord_fixed() +
theme_classic()
# C plot
p_rCrite <- ggplot(sdtPars, aes(x=as.factor(mc),y=as.factor(theta),fill=resCri)) +
labs(x = expression(Memory~Capacity~(tau)),
y = expression(Proximity~Threshold~(theta)),fill="C") +
geom_raster(interpolate = T) +
scale_y_discrete(breaks = seq(15,300,by=30)) +
scale_x_discrete(breaks = seq(6,120,by=12)) +
scale_fill_gradient2(low="#0000FFFF",mid="#FFFFFFFF",high="#FF0000FF") +
coord_fixed() +
theme_classic()
# select the "good" parameters (i.e., not extreme C and high d')
sdtPars$goodPar <- ifelse(sdtPars$sensit > 1 &
(sdtPars$resCri < 1 & sdtPars$resCri > -1),
"good","bad")
# plot d' against C and visualize the "good" parameters
p_corPar <- ggplot(sdtPars, aes(x=resCri,y=sensit,col=goodPar)) +
labs(x = "Response Criterion (C)",
y = "Sensibility (d')") +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
geom_point(size=1) +
scale_y_continuous(breaks = seq(-5,5,by=0.5)) +
scale_x_continuous(breaks = seq(-5,5,by=1)) +
# coord_fixed() +
theme_classic()
# print the previous figures if print_fig <- 1
print_fig <- 0
if (print_fig == 1) {
ggsave("/figures_tables/p_dPrime2.jpg",
plot = p_dPrime, width = 12, height = 12, units = "cm",
dpi = 900, device='png', limitsize = T)
ggsave("/figures_tables/p_rCrite2.png",
plot = p_rCrite, width = 12, height = 12, units = "cm",
dpi = 900, device='png', limitsize = T)
ggsave("figures_tables/p_corPar.png",
plot = p_corPar, width = 10, height = 8, units = "cm",
dpi = 900, device='png', limitsize = T)
}
# select only the "good" parameters so we simulate experiment with those,
# then we will recover those parameters
bestSdtPars <- sdtPars[sdtPars$goodPar == "good",]
# if you don't want to simulate with multiple eta values (slow)
params <- data.frame(mc=bestSdtPars$mc,
theta=bestSdtPars$theta,
eta=0.75)
# select random n trials for running simulations
n = 80
randomTrials <- sample(1:300,n)
for (i in 1:length(randomTrials)) {
if (i == 1) {
randDist <- dist[dist$trial == randomTrials[i],]
} else {
randDist <- rbind(randDist,dist[dist$trial == randomTrials[i],])
}
}
getwd()
p_rCrite
ggsave("/figures_tables/p_dPrime2.jpg",
plot = p_dPrime, width = 12, height = 12, units = "cm",
dpi = 900, device='png', limitsize = T)
ggsave("/figures_tables/p_rCrite2.png",
plot = p_rCrite, width = 12, height = 12, units = "cm",
dpi = 900, device='png', limitsize = T)
ggsave("figures_tables/p_dPrime2.jpg",
plot = p_dPrime, width = 12, height = 12, units = "cm",
dpi = 900, device='png', limitsize = T)
ggsave("figures_tables/p_dPrime2.jpg",
plot = p_dPrime, width = 12, height = 12, units = "cm",
dpi = 900, device='png', limitsize = T)
ggsave("figures_tables/p_rCrite2.png",
plot = p_rCrite, width = 12, height = 12, units = "cm",
dpi = 900, device='png', limitsize = T)
ggsave("figures_tables/p_corPar.png",
plot = p_corPar, width = 10, height = 8, units = "cm",
dpi = 900, device='png', limitsize = T)
# add participant (parameters set) ID
simPars$part <- paste0(simPars$mc,"_",simPars$theta,"_",simPars$eta)
simTrials$part <- paste0(simTrials$mc,"_",simTrials$theta,"_",simTrials$eta)
write_csv <- 0
simPars <- read.csv("figures_tables/simPars.csv")
simTrials <- read.csv("figures_tables/simTrials.csv")
randDist <- read.csv("figures_tables/randDist.csv")
plot(simPars$resCri,simPars$sensit)
plot(simPars$mc,simPars$theta)
# # # # # # # # # # fit simulated parameters # # # # # # # # # # # # # # # # ####
# get all participants vector (i.e., set of parameters)
simParticip <- unique(simPars$part)
range(params$mc)
range(params$theta)
range(params$eta)
fitPars <- list(mcRange = c(30,100),
thetaRange = c(70,170),
etaRange = c(0.55,0.95),
binsSize = data.frame(mc=15,theta=15,eta=30))
