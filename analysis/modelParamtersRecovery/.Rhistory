print("hello")
# Remove all of the elements currently loaded in R
rm(list=ls(all=TRUE))
# add work directory
setwd(file.path(dirname(rstudioapi::getActiveDocumentContext()$path)))
# # # # # # # # # # functions # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
source("functions.R")
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
discsDistances <- read.csv("figures_tables/discsDistances.csv")
# discsAngles <- read.csv("figures_tables/discsAngles.csv")
# discsPositions <- read.csv("figures_tables/discsPositions.csv")
# get the simulated parametric space
if (sum(list.files("figures_tables") == "sdtParameters.csv") > 0) {
sdtParameters <- read.csv("figures_tables/sdtParameters.csv")
} else {
warning("Run script visualize_parametric_space.R")
}
# # # # # # # # # # simulate with good parameters # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# select only the "good" parameters so we will recover those parameters
sdtParameters$goodPar <- ifelse(sdtParameters$sensit > 0.8 &
(sdtParameters$resCri < 1.2 &
sdtParameters$resCri > -1.2),"good","bad")
bestSdtPars <- sdtParameters[sdtParameters$goodPar == "good",]
# # # # if you don't want to simulate with multiple eta values (slow)
params <- data.frame(mc=bestSdtPars$mc,
theta=bestSdtPars$theta,
eta=0.75) # eta won't be used
# select nTrialsPerCond trials per condition (chase/mirror)
nTrialsPerCond <- 80
randDist <- f_randNTrials(discsDistances,nTrialsPerCond)
sum(list.files("figures_tables") == "simPars.csv" |
list.files("figures_tables") == "simTrials.csv" |
list.files("figures_tables") == "randDist.csv") == 0
# select nTrialsPerCond trials per condition (chase/mirror)
nTrialsPerCond <- 100
randDist <- f_randNTrials(discsDistances,nTrialsPerCond)
# for loop for parameters set
for (p in 1:nrow(params)) {
message(paste("set of parameters:",p))
if (p == 1) {
sim <- f_detMod(randDist, params[p,])
simPars <- sim$params
simTrials <- sim$dbTrials
} else {
sim <- f_detMod(randDist, params[p,])
simPars <- rbind(simPars,sim$params)
simTrials <- rbind(simTrials,sim$dbTrials)
}
}; remove(sim)
# add participant (parameters set) ID
simPars$part <- paste0(simPars$mc,"_",simPars$theta,"_",simPars$eta)
simTrials$part <- paste0(simTrials$mc,"_",simTrials$theta,"_",simTrials$eta)
# write the data.frames in csv inside "figures_tables" folder
write.csv(simPars,"figures_tables/simPars.csv", row.names = F)
write.csv(simTrials,"figures_tables/simTrials.csv", row.names = F)
write.csv(randDist,"figures_tables/simRandDist.csv", row.names = F)
# if randDist, simPars, and simTrials are already write, then just read the
# files and not simulate nor write them again.
if (sum(list.files("figures_tables") == "simPars.csv" |
list.files("figures_tables") == "simTrials.csv" |
list.files("figures_tables") == "randDist.csv") == 0) {
# for loop for parameters set
for (p in 1:nrow(params)) {
message(paste("set of parameters:",p))
if (p == 1) {
sim <- f_detMod(randDist, params[p,])
simPars <- sim$params
simTrials <- sim$dbTrials
} else {
sim <- f_detMod(randDist, params[p,])
simPars <- rbind(simPars,sim$params)
simTrials <- rbind(simTrials,sim$dbTrials)
}
}; remove(sim)
# add participant (parameters set) ID
simPars$part <- paste0(simPars$mc,"_",simPars$theta,"_",simPars$eta)
simTrials$part <- paste0(simTrials$mc,"_",simTrials$theta,"_",simTrials$eta)
# write the data.frames in csv inside "figures_tables" folder
write.csv(simPars,"figures_tables/simPars.csv", row.names = F)
write.csv(simTrials,"figures_tables/simTrials.csv", row.names = F)
write.csv(randDist,"figures_tables/simRandDist.csv", row.names = F)
} else {
warning("Simulations with good parameters are already done. Use parameters_recovery.R")
}
# Remove all of the elements currently loaded in R
rm(list=ls(all=TRUE))
# add work directory
setwd(file.path(dirname(rstudioapi::getActiveDocumentContext()$path)))
# # # # # # # # # # functions # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
source("functions.R")
sum(list.files("figures_tables") == "simPars.csv" |
list.files("figures_tables") == "simTrials.csv" |
list.files("figures_tables") == "simRandDist.csv") > 0
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# get artificial agents simulated with "good" parameters
if (sum(list.files("figures_tables") == "simPars.csv" |
list.files("figures_tables") == "simTrials.csv" |
list.files("figures_tables") == "simRandDist.csv") > 0) {
simPars <- read.csv("figures_tables/simPars.csv")
simTrials <- read.csv("figures_tables/simTrials.csv")
randDist <- read.csv("figures_tables/simRandDist.csv")
} else {
warning("Run script simulate_good_parameters.R")
}
head(simPars)
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# get artificial agents simulated with "good" parameters
if (sum(list.files("figures_tables") == "simPars.csv" |
list.files("figures_tables") == "simTrials.csv" |
list.files("figures_tables") == "simRandDist.csv") > 0) {
simPars <- read.csv("figures_tables/simPars.csv")
simTrials <- read.csv("figures_tables/simTrials.csv")
randDist <- read.csv("figures_tables/simRandDist.csv")
} else {
warning("Run script simulate_good_parameters.R")
}
# # # # # # # # # # parameters recovery # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# get all "participants" vector (i.e., set of parameters)
simParticip <- unique(simPars$part)
range(simPars$mc)
range(simPars$theta)
range(simPars$eta)
# parameters for fitting algorithm based on mc, theta, and eta ranges
fitPars <- list(mcRange = c(20,100),
thetaRange = c(50,200),
etaRange = c(0.55,0.95),
binsSize = data.frame(mc=30,theta=30,eta=30))
# add columns which will be filled with the fitting algorithm
simPars$negSumLog <- simPars$hitRate <-
simPars$eta_fit_var <- simPars$theta_fit_var <- simPars$mc_fit_var <-
simPars$eta_fit_wm <- simPars$theta_fit_wm <- simPars$mc_fit_wm <- NA
# create list to get posterior densities
posterior_densities <- list()
# get starting time
start_time <- Sys.time()
rm(start_time)
dim(simPars)
dim(randDist)
