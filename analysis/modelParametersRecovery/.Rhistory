# Remove all of the elements currently loaded in R
rm(list=ls(all=TRUE))
# add work directory
setwd(file.path(dirname(rstudioapi::getActiveDocumentContext()$path)))
# # # # # # # # # # libraries # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2) # ggplot()
if (!require(reshape2)) {install.packages("reshape2")}; library(reshape2) # melt()
# # # # # # # # # # functions # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
source("functions.R")
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # import stimuli .txt data (from Ben van Buren) this are 600 8sec videos
db1 <- read.table("../../stim/van_Buren_stimuli/chasing_detection_stimuli/chasing/chasing_frames.txt")
db2 <- read.table("../../stim/van_Buren_stimuli/chasing_detection_stimuli/mirror_chasing/mirror_chasing_frames.txt")
# combine databases
db <- data.frame(trialType=c(rep("chase",nrow(db1)),
rep("mirror",nrow(db2))),
rbind(db1,db2))
# colomn names titles
colnames(db)[-1] <- c("trial","frame","wX","wY","sX","sY",
"d1X","d1Y","d2X","d2Y",
"d3X","d3Y","d4X","d4Y",
"d5X","d5Y","d6X","d6Y")
# create the trial condition variable
db$trialCond <- paste0(db$trial,"_",db$trialType)
# discs names (one wolf, one sheep, and 6 distractions)
elem <- c("w","s","d1","d2","d3","d4","d5","d6")
# create data.frame with the combinations of the 8 elements
allRelations <- data.frame(t(combn(elem,2)))
# combine the name of each combination
allRelations$name <- paste0(allRelations[,1],"_",allRelations[,2])
# create distance (dist) and angle (angl) data frames
dist <- angl <- data.frame(trialType=db$trialType,trial=db$trial,
frame=db$frame,trialCond=db$trialCond)
# Remove all of the elements currently loaded in R
rm(list=ls(all=TRUE))
# add work directory
setwd(file.path(dirname(rstudioapi::getActiveDocumentContext()$path)))
# # # # # # # # # # functions # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
source("functions.R")
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
discsDistances <- read.csv("figures_tables/discsDistances.csv")
head(discsDistances)
di(discsDistances)
dim(discsDistances)
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
discsDistances <- read.csv("figures_tables/discsDistances.csv")
(sum(list.files("figures_tables") == "sdtParameters.csv") > 0)
# discsAngles <- read.csv("figures_tables/discsAngles.csv")
# discsPositions <- read.csv("figures_tables/discsPositions.csv")
# get the simulated parametric space
if (sum(list.files("figures_tables") == "sdtParameters.csv") > 0) {
sdtParameters <- read.csv("figures_tables/sdtParameters.csv")
} else {
warning("Run script visualize_parametric_space.R")
}
head(sdtParameters)
dim(sdtParameters)
# # # # # # # # # # simulate with good parameters # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# select only the "good" parameters so we will recover those parameters
sdtParameters$goodPar <- ifelse(sdtParameters$sensit > 0.8 &
(sdtParameters$resCri < 1.2 &
sdtParameters$resCri > -1.2),"good","bad")
bestSdtPars <- sdtParameters[sdtParameters$goodPar == "good",]
bestSdtPars
dim(bestSdtPars)
# # # # if you don't want to simulate with multiple eta values (slow)
params <- data.frame(mc=bestSdtPars$mc,
theta=bestSdtPars$theta,
eta=0.75) # eta won't be used
# select nTrialsPerCond trials per condition (chase/mirror)
nTrialsPerCond <- 100
randDist <- f_randNTrials(discsDistances,nTrialsPerCond)
dim(randDist)
(sum(list.files("figures_tables") == "simPars.csv" |
list.files("figures_tables") == "simTrials.csv" |
list.files("figures_tables") == "randDist.csv") == 0)
warning("Simulations with good parameters are already done. Use parameters_recovery.R")
# Remove all of the elements currently loaded in R
rm(list=ls(all=TRUE))
# add work directory
setwd(file.path(dirname(rstudioapi::getActiveDocumentContext()$path)))
# # # # # # # # # # functions # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
source("functions.R")
(sum(list.files("figures_tables") == "simPars.csv" |
list.files("figures_tables") == "simRandDist.csv") > 0)
simPars <- read.csv("figures_tables/simPars.csv")
randDist <- read.csv("figures_tables/simRandDist.csv")
# # # # # # # # # # parameters recovery # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# get all "participants" vector (i.e., set of parameters)
simFilesNames <- list.files("sim_data/")
simFilesNames
simCode <- unique(simPars$part)
simCode
range(simPars$mc)
range(simPars$theta)
range(simPars$eta)
# parameters for fitting algorithm based on mc, theta, and eta ranges
fit_posterior_space  <- list(mcRange = c(15,105),
thetaRange = c(40,210),
etaRange = c(0.52,0.98),
# binsSize = data.frame(mc=50,theta=50,eta=50))
binsSize = data.frame(mc=30,theta=30,eta=30))
# add columns which will be filled with the fitting algorithm
simPars$negSumLog <- simPars$hitRate <-
simPars$eta_fit_var <- simPars$theta_fit_var <- simPars$mc_fit_var <-
simPars$eta_fit_wm <- simPars$theta_fit_wm <- simPars$mc_fit_wm <- NA
# create list to get posterior densities
posterior_densities <- list()
# get starting time
start_time <- Sys.time()
i=1
message(paste0("participant (",simCode[i],"): ",i,"/",length(simCode)))
# get only one participant (i.e., set of parameters)
onePartDat <- read.csv(paste0("sim_data/",simFilesNames[i]))
# fit one participant (i.e., set of parameters)
temp <- f_fit_one(randDist, chaseResp=onePartDat$chaseR,
fit_posterior_space,fitParallel = F)
# Remove all of the elements currently loaded in R
rm(list=ls(all=TRUE))
# add work directory
setwd(file.path(dirname(rstudioapi::getActiveDocumentContext()$path)))
# # # # # # # # # # libraries # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
if (!require(dplyr)) {install.packages("dplyr")}; library(dplyr)
# # # # # # # # # # functions # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
source("functions.R")
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
discsDistances <- read.csv("figures_tables/discsDistances.csv")
discsAngles <- read.csv("figures_tables/discsAngles.csv")
discsPositions <- read.csv("figures_tables/discsPositions.csv")
# vector with multiple memory capacities
mc <- seq(6,120,by=6)
# vector with multiple distance threshold
theta <- seq(15,300,by=15)
# create combinations of all previous parameters (mc and theta)
params <- data.frame(mc=rep(mc,length(theta)),theta=rep(theta,each=length(mc)))
sum(list.files("figures_tables")=="sdtParameters.csv")==0
## ## f_SDTparamExplor is a function that is in "function.R" (NOTE: is slow)
# if there is already sdtParameters, then don't run
if (sum(list.files("figures_tables")=="sdtParameters.csv")==0) {
sdtParameters <- f_SDTparamExplor(discsDistances,params)
# write the results in a csv
write.csv(sdtParameters,"figures_tables/sdtParameters.csv",row.names = F)
} else {
# if you have already saved the results, read the csv
sdtParameters <- read.csv("figures_tables/sdtParameters.csv")
}
head(sdtParameters)
# create new columns (for SDT parameters)
params$r0_m <- params$r0_c <- params$r1_m <- params$r1_c <- params$h <-
params$f <- params$resCri <- params$sensit <- NA
# event types ordered: hit  FA   Ms  CR
events <- c("1_chase","1_mirror","0_chase","0_mirror")
# run a detection algorithm based on memory capacity
dbTrials <- data.frame(trialType=rep(c("chase","mirror"),each=300),
trial=rep(1:300,2),
trialCond=unique(dist$trialCond))
head(dist)
dist<-discsDistances
# create new columns (for SDT parameters)
params$r0_m <- params$r0_c <- params$r1_m <- params$r1_c <- params$h <-
params$f <- params$resCri <- params$sensit <- NA
# event types ordered: hit  FA   Ms  CR
events <- c("1_chase","1_mirror","0_chase","0_mirror")
# run a detection algorithm based on memory capacity
dbTrials <- data.frame(trialType=rep(c("chase","mirror"),each=300),
trial=rep(1:300,2),
trialCond=unique(dist$trialCond))
[=1]
p=1
message(paste("set of parameters:",p))
# create same size database to build Boolean
distBool <- dist
# Boolean given theta
distBool[,-1:-4] <- ifelse(distBool[,-1:-4] < params$theta[p],1,0)
# detection as 0 for each set of parameters
dbTrials$detect <- 0
nrow(params)
length(unique(distBool$trialCond))
message(paste("set of parameters:",p))
# create same size database to build Boolean
distBool <- dist
# Boolean given theta
distBool[,-1:-4] <- ifelse(distBool[,-1:-4] < params$theta[p],1,0)
# detection as 0 for each set of parameters
dbTrials$detect <- 0
# dbTrials$detFrame <- NA
# run all the trials loop to detect consecutive mc detected frames
for (t in 1:length(unique(distBool$trialCond))) {
temp <- distBool[distBool$trialCond == unique(distBool$trialCond)[t],-1:-4]
for (w in 1:(nrow(temp)-params$mc)) {
# at least one distance equal to mc
detection <- sum(colSums(temp[w:(w+params$mc-1),]) == params$mc)
if (detection > 0) {
dbTrials$detect[t] <- 1
break # if detection then stop trial (for loop)
# if detection frame is an NA then fill it with the detection frame
# i.e., (w+params$mc[p]-1)
# if (is.na(dbTrials$detFrame[t])) {
#   dbTrials$detFrame[t] <- (w+params$mc[p]-1)
# }
}
} # end window w loop
} # end trials i loop
dim(distBool)
dim()
dim(dbTrials)
head(dbTrials)
# Remove all of the elements currently loaded in R
rm(list=ls(all=TRUE))
# add work directory
setwd(file.path(dirname(rstudioapi::getActiveDocumentContext()$path)))
# # # # # # # # # # libraries # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
if (!require(dplyr)) {install.packages("dplyr")}; library(dplyr)
# # # # # # # # # # functions # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
source("functions.R")
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
discsDistances <- read.csv("figures_tables/discsDistances.csv")
discsAngles <- read.csv("figures_tables/discsAngles.csv")
discsPositions <- read.csv("figures_tables/discsPositions.csv")
# vector with multiple memory capacities
mc <- seq(6,120,by=6)
# vector with multiple distance threshold
theta <- seq(15,300,by=15)
# create combinations of all previous parameters (mc and theta)
params <- data.frame(mc=rep(mc,length(theta)),theta=rep(theta,each=length(mc)))
## ## f_SDTparamExplor is a function that is in "function.R" (NOTE: is slow)
# if there is already sdtParameters, then don't run
if (sum(list.files("figures_tables")=="sdtParameters.csv")==0) {
sdtParameters <- f_SDTparamExplor(discsDistances,params)
# write the results in a csv
write.csv(sdtParameters,"figures_tables/sdtParameters.csv",row.names = F)
} else {
# if you have already saved the results, read the csv
sdtParameters <- read.csv("figures_tables/sdtParameters.csv")
}
dbTrials<-discsDistances
# NOTE: events must be ordered as follows: hit, FA, Ms, CR
# SDT cell frequencies
SDTtab <- colSums(dbTrials$cells==t(matrix(rep(events,nrow(dbTrials)),ncol=nrow(dbTrials))))
dist<-discsDistances
# create new columns (for SDT parameters)
params$r0_m <- params$r0_c <- params$r1_m <- params$r1_c <- params$h <-
params$f <- params$resCri <- params$sensit <- NA
# event types ordered: hit  FA   Ms  CR
events <- c("1_chase","1_mirror","0_chase","0_mirror")
# run a detection algorithm based on memory capacity
dbTrials <- data.frame(trialType=rep(c("chase","mirror"),each=300),
trial=rep(1:300,2),
trialCond=unique(dist$trialCond))
dim(dbTrials)
p=1
message(paste("set of parameters:",p))
# create same size database to build Boolean
distBool <- dist
# Boolean given theta
distBool[,-1:-4] <- ifelse(distBool[,-1:-4] < params$theta[p],1,0)
# detection as 0 for each set of parameters
dbTrials$detect <- 0
# dbTrials$detFrame <- NA
# run all the trials loop to detect consecutive mc detected frames
for (t in 1:length(unique(distBool$trialCond))) {
temp <- distBool[distBool$trialCond == unique(distBool$trialCond)[t],-1:-4]
for (w in 1:(nrow(temp)-params$mc)) {
# at least one distance equal to mc
detection <- sum(colSums(temp[w:(w+params$mc-1),]) == params$mc)
if (detection > 0) {
dbTrials$detect[t] <- 1
break # if detection then stop trial (for loop)
# if detection frame is an NA then fill it with the detection frame
# i.e., (w+params$mc[p]-1)
# if (is.na(dbTrials$detFrame[t])) {
#   dbTrials$detFrame[t] <- (w+params$mc[p]-1)
# }
}
} # end window w loop
} # end trials i loop
# SDT cell types
dbTrials$cells <- paste0(dbTrials$detect,"_",dbTrials$trialType)
# SDT estimation parameters
SDTpar <- f_SDTparam(dbTrials,events)
SDTpar
# SDT estimation parameters
SDTpar <- f_SDTparam(dbTrials,events)
params$sensit[p] <- SDTpar$sensit
params$resCri[p] <- SDTpar$resCri
params$h[p] <- SDTpar$h
params$f[p] <- SDTpar$f
params[p,7:10] <- SDTpar$SDTtab
params
dim(params)
# script created by Santiago Castiello. It is used to visualize and simulate
# the parametric space from the Perceived Animacy model that I created. The
# simulations are based on the 600 displays created by Ben van Buren
# 17/05/2022. Special thanks to Josh Kenney.
# Remove all of the elements currently loaded in R
rm(list=ls(all=TRUE))
# add work directory
setwd(file.path(dirname(rstudioapi::getActiveDocumentContext()$path)))
# # # # # # # # # # libraries # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
if (!require(dplyr)) {install.packages("dplyr")}; library(dplyr)
# # # # # # # # # # functions # # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
source("functions.R")
# # # # # # # # # # import data # # # # # # # # # # # # # # # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
discsDistances <- read.csv("figures_tables/discsDistances.csv")
discsAngles <- read.csv("figures_tables/discsAngles.csv")
discsPositions <- read.csv("figures_tables/discsPositions.csv")
# # # # # # # # # # simulate with the distance/memory model # # # # # # # # ####
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# vector with multiple memory capacities
mc <- seq(6,120,by=6)
# vector with multiple distance threshold
theta <- seq(15,300,by=15)
# create combinations of all previous parameters (mc and theta)
params <- data.frame(mc=rep(mc,length(theta)),theta=rep(theta,each=length(mc)))
sum(list.files("figures_tables")=="sdtParameters.csv")==0
# vector with multiple memory capacities
mc <- seq(6,120,by=60)
# vector with multiple distance threshold
theta <- seq(15,300,by=150)
# create combinations of all previous parameters (mc and theta)
params <- data.frame(mc=rep(mc,length(theta)),theta=rep(theta,each=length(mc)))
params
sdtParameters <- f_SDTparamExplor(discsDistances,params)
sdtParameters
dist<-discsDistances
# create new columns (for SDT parameters)
params$r0_m <- params$r0_c <- params$r1_m <- params$r1_c <- params$h <-
params$f <- params$resCri <- params$sensit <- NA
# event types ordered: hit  FA   Ms  CR
events <- c("1_chase","1_mirror","0_chase","0_mirror")
# run a detection algorithm based on memory capacity
dbTrials <- data.frame(trialType=rep(c("chase","mirror"),each=300),
trial=rep(1:300,2),
trialCond=unique(dist$trialCond))
p=1
message(paste("set of parameters:",p))
# create same size database to build Boolean
distBool <- dist
# Boolean given theta
distBool[,-1:-4] <- ifelse(distBool[,-1:-4] < params$theta[p],1,0)
# detection as 0 for each set of parameters
dbTrials$detect <- 0
1:length(unique(distBool$trialCond))
temp <- distBool[distBool$trialCond == unique(distBool$trialCond)[t],-1:-4]
t
t=1
temp <- distBool[distBool$trialCond == unique(distBool$trialCond)[t],-1:-4]
1:(nrow(temp)-params$mc)
params$mc
params$mc
1:(nrow(temp)-params$mc[p])
# at least one distance equal to mc
detection <- sum(colSums(temp[w:(w+params$mc-1),]) == params$mc)
w=1
temp[w:(w+params$mc-1),]
# at least one distance equal to mc
detection <- sum(colSums(temp[w:(w+params$mc-1),]) == params$mc)
head(params)
